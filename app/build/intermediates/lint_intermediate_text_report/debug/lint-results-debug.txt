D:\My_Stuff\Coding\Android\server_status\app\build.gradle:13: Warning: Not targeting the latest versions of Android; compatibility modes apply. Consider testing and updating this version. Consult the android.os.Build.VERSION_CODES javadoc for details. [OldTargetApi]
        targetSdk 33
        ~~~~~~~~~~~~

   Explanation for issues of type "OldTargetApi":
   When your application runs on a version of Android that is more recent than
   your targetSdkVersion specifies that it has been tested with, various
   compatibility modes kick in. This ensures that your application continues
   to work, but it may look out of place. For example, if the targetSdkVersion
   is less than 14, your app may get an option button in the UI.

   To fix this issue, set the targetSdkVersion to the highest available value.
   Then test your app to make sure everything works correctly. You may want to
   consult the compatibility notes to see what changes apply to each version
   you are adding support for:
   https://developer.android.com/reference/android/os/Build.VERSION_CODES.html
   as well as follow this guide:
   https://developer.android.com/distribute/best-practices/develop/target-sdk.
   html

   https://developer.android.com/distribute/best-practices/develop/target-sdk.html

D:\My_Stuff\Coding\Android\server_status\app\src\main\AndroidManifest.xml:8: Warning: Attribute networkSecurityConfig is only used in API level 24 and higher (current min is 21) [UnusedAttribute]
        android:networkSecurityConfig="@xml/network_security_config"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\AndroidManifest.xml:9: Warning: Attribute usesCleartextTraffic is only used in API level 23 and higher (current min is 21) [UnusedAttribute]
        android:usesCleartextTraffic="true"
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "UnusedAttribute":
   This check finds attributes set in XML files that were introduced in a
   version newer than the oldest version targeted by your application (with
   the minSdkVersion attribute).

   This is not an error; the application will simply ignore the attribute.
   However, if the attribute is important to the appearance or functionality
   of your application, you should consider finding an alternative way to
   achieve the same result with only available attributes, and then you can
   optionally create a copy of the layout in a layout-vNN folder which will be
   used on API NN or higher where you can take advantage of the newer
   attribute.

   Note: This check does not only apply to attributes. For example, some tags
   can be unused too, such as the new <tag> element in layouts introduced in
   API 21.

D:\My_Stuff\Coding\Android\server_status\app\src\main\AndroidManifest.xml:23: Warning: <uses-permission> tag appears after <application> tag [ManifestOrder]
    <uses-permission android:name="android.permission.INTERNET" />
     ~~~~~~~~~~~~~~~

   Explanation for issues of type "ManifestOrder":
   The <application> tag should appear after the elements which declare which
   version you need, which features you need, which libraries you need, and so
   on. In the past there have been subtle bugs (such as themes not getting
   applied correctly) when the <application> tag appears before some of these
   other elements, so it's best to order your manifest in the logical
   dependency order.

D:\My_Stuff\Coding\Android\server_status\app\build.gradle:39: Warning: A newer version of androidx.lifecycle:lifecycle-viewmodel than 2.5.1 is available: 2.9.0 [GradleDependency]
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.5.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\build.gradle:40: Warning: A newer version of androidx.lifecycle:lifecycle-livedata than 2.5.1 is available: 2.9.0 [GradleDependency]
    implementation 'androidx.lifecycle:lifecycle-livedata:2.5.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\build.gradle:42: Warning: A newer version of androidx.appcompat:appcompat than 1.5.1 is available: 1.7.0 [GradleDependency]
    implementation 'androidx.appcompat:appcompat:1.5.1'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\build.gradle:43: Warning: A newer version of com.google.android.material:material than 1.7.0 is available: 1.12.0 [GradleDependency]
    implementation 'com.google.android.material:material:1.7.0'
                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "GradleDependency":
   This detector looks for usages of libraries where the version you are using
   is not the current stable release. Using older versions is fine, and there
   are cases where you deliberately want to stick with an older version.
   However, you may simply not be aware that a more recent version is
   available, and that is what this lint check helps find.

D:\My_Stuff\Coding\Android\server_status\app\src\main\res\mipmap-anydpi-v26\ic_launcher_round.xml:2: Warning: The resource R.mipmap.ic_launcher_round appears to be unused [UnusedResources]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "UnusedResources":
   Unused resources make applications larger and slow down builds.


   The unused resource check can ignore tests. If you want to include
   resources that are only referenced from tests, consider packaging them in a
   test source set instead.

   You can include test sources in the unused resource check by setting the
   system property lint.unused-resources.include-tests =true, and to exclude
   them (usually for performance reasons), use
   lint.unused-resources.exclude-tests =true.
   ,

D:\My_Stuff\Coding\Android\server_status\app\src\main\res\mipmap-anydpi-v26\ic_launcher.xml:2: Warning: The application adaptive icon is missing a monochrome tag [MonochromeLauncherIcon]
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
^

   Explanation for issues of type "MonochromeLauncherIcon":
   If android:roundIcon and android:icon are both in your manifest, you must
   either remove the reference to android:roundIcon if it is not needed; or,
   supply the monochrome icon in the drawable defined by the android:roundIcon
   and android:icon attribute.

   For example, if android:roundIcon and android:icon are both in the
   manifest, a launcher might choose to use android:roundIcon over
   android:icon to display the adaptive app icon. Therefore, your themed
   application iconwill not show if your monochrome attribute is not also
   specified in android:roundIcon.

D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:50: Warning: Do not concatenate text displayed with setText. Use resource string with placeholders. [SetTextI18n]
                    cpuInfo.setText("CPU Utilisation: " + status.cpu.utilisation + "%");
                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:50: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    cpuInfo.setText("CPU Utilisation: " + status.cpu.utilisation + "%");
                                    ~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:51: Warning: Do not concatenate text displayed with setText. Use resource string with placeholders. [SetTextI18n]
                    memoryInfo.setText("Memory Available: " + status.memory.available + " / " + status.memory.total);
                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:51: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    memoryInfo.setText("Memory Available: " + status.memory.available + " / " + status.memory.total);
                                       ~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:52: Warning: Do not concatenate text displayed with setText. Use resource string with placeholders. [SetTextI18n]
                    storageInfo.setText("Storage Available: " + status.storage.available + " / " + status.storage.total);
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:52: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    storageInfo.setText("Storage Available: " + status.storage.available + " / " + status.storage.total);
                                        ~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:53: Warning: Do not concatenate text displayed with setText. Use resource string with placeholders. [SetTextI18n]
                    networkInfo.setText("Network RX: " + status.network.rx + " | TX: " + status.network.tx);
                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:53: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    networkInfo.setText("Network RX: " + status.network.rx + " | TX: " + status.network.tx);
                                        ~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:53: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    networkInfo.setText("Network RX: " + status.network.rx + " | TX: " + status.network.tx);
                                                                             ~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:54: Warning: Do not concatenate text displayed with setText. Use resource string with placeholders. [SetTextI18n]
                    hostInfo.setText("Hostname: " + status.host.hostname + " | OS: " + status.host.os);
                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:54: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    hostInfo.setText("Hostname: " + status.host.hostname + " | OS: " + status.host.os);
                                     ~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\java\com\example\server_status\MainActivity.java:54: Warning: String literal in setText can not be translated. Use Android resources instead. [SetTextI18n]
                    hostInfo.setText("Hostname: " + status.host.hostname + " | OS: " + status.host.os);
                                                                           ~~~~~~~~~

   Explanation for issues of type "SetTextI18n":
   When calling TextView#setText
   * Never call Number#toString() to format numbers; it will not handle
   fraction separators and locale-specific digits properly. Consider using
   String#format with proper format specifications (%d or %f) instead.
   * Do not pass a string literal (e.g. "Hello") to display text. Hardcoded
   text can not be properly translated to other languages. Consider using
   Android resource strings instead.
   * Do not build messages by concatenating text chunks. Such messages can not
   be properly translated.

   https://developer.android.com/guide/topics/resources/localization.html

D:\My_Stuff\Coding\Android\server_status\app\src\main\res\layout\activity_main.xml:11: Warning: Hardcoded string "Loading CPU Info...", should use @string resource [HardcodedText]
        android:text="Loading CPU Info..."
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\res\layout\activity_main.xml:17: Warning: Hardcoded string "Loading Memory Info...", should use @string resource [HardcodedText]
        android:text="Loading Memory Info..."
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\res\layout\activity_main.xml:23: Warning: Hardcoded string "Loading Storage Info...", should use @string resource [HardcodedText]
        android:text="Loading Storage Info..."
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\res\layout\activity_main.xml:29: Warning: Hardcoded string "Loading Network Info...", should use @string resource [HardcodedText]
        android:text="Loading Network Info..."
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
D:\My_Stuff\Coding\Android\server_status\app\src\main\res\layout\activity_main.xml:35: Warning: Hardcoded string "Loading Host Info...", should use @string resource [HardcodedText]
        android:text="Loading Host Info..."
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Explanation for issues of type "HardcodedText":
   Hardcoding text attributes directly in layout files is bad for several
   reasons:

   * When creating configuration variations (for example for landscape or
   portrait) you have to repeat the actual text (and keep it up to date when
   making changes)

   * The application cannot be translated to other languages by just adding
   new translations for existing string resources.

   There are quickfixes to automatically extract this hardcoded string into a
   resource lookup.

0 errors, 27 warnings
